#+title: Algorithm Estimation

* Reciben.
optimize_parameters_for_cells(ID_stations, density_observed, ID_sources_1D, initial_rho_sources):

minimize(objective, rho_initial, args=(ID_stations, density_observed), method='L-BFGS-B', bounds=bounds)

objective(rho_sources_opt, ID_stations, density_observed):

density_grid_simulated_opt = LB_density_with_sources(Lx, Ly, sources_1D, rho_sources_opt, sigma)

LatticeBoltzmann(ID_Sources,initial_rho_sources, rho_sources_opt, )



* Python.
** Funciones que se usan:
optimize_parameters_for_cells(ID_stations, density_observed, ID_sources_1D,initial_rho_sources): **Densidad Observada ya es la de las estaciones**

minimize(objective, *rho_initial*, args=(ID_stations, density_observed, sources1D,t), method='L-BFGS-B', bounds=bounds) #rho_inicial de los parámetros se pasa a minimize.

** Implementación:

#+BEGIN_SRC python
def objective(rho_sources_opt, ID_stations, density_observed, sources_1D,t):

    """
    Calcula el error entre la densidad observada y la densidad simulada solo en las celdas que tienen estaciones.

    Parameters:
    - rho_sources_opt: valores optimizados de rho para las celdas fuente.
    - stations: lista de índices de celdas con estaciones.
    - density_observed: arreglo unidimensional de densidad observada.
    Returns:
    - error: suma de los cuadrados de las diferencias en las celdas de las estaciones.
    """

    # Calcula la densidad simulada usando valor entrada rho_sources_opt

    simulated_stations_opt = LatticeBoltzmann(ID_Sources,rho_sources_opt,t)

    #Se extrae el valor de la densidad solo en las estaciones.
    simulated_stations_opt[stations]

    # Extraer las densidades en las estaciones de la densidad observada y simulada optimizada
    simulated_stations_opt = density_simulated_opt[stations]

    # Calcular el error cuadrático medio entre las densidades observadas y simuladas en las estaciones
    #Densidad observada ya es la de la de las estaciones.
    error = np.sum((observed_stations - simulated_stations_opt) ** 2)
    return error


def optimize_parameters_for_cells(stations, density_observed, sources_1D, rho_sources):
    """Optimiza los valores de rho para las celdas fuente para minimizar el error entre densidad simulada y observada en las estaciones."""
    rho_initial = rho_sources  # Valores iniciales para las celdas fuente
    bounds = [(0.5, 4.0)] * len(sources_1D)  # Restricciones sobre los valores de las celdas fuente

    # Ejecutar la optimización
    result = minimize(objective, rho_initial, args=(stations, density_observed, sources_1D), method='L-BFGS-B', bounds=bounds)

    # Resultados óptimos
    rho_opt = result.x
    return rho_opt


if __name__=="__main__":
    # Ejemplo de uso
    Lx = 15
    Ly = 15
    sigma = 5.0
    sources_1D = [33, 141, 175,23]  # Índices de celdas con incendio para todos los tiempos.
    stations = [21, 70, 81, 122, 133, 3] #Ubicación de las estaciones para todos los tiempos.
    initial_rho_sources = [1.0, 2.0, 1.5, 3.4] #Valores iniciales de rho (Investigación Alejandra)

    rho_sources_random = np.random.uniform(0.5, 4.0, size=4) #Valores de rho reales en cada estación.

    # Simular la densidad y obtener una grilla para plot (Densidades en el espacio)
    density_grid_simulated = LB_density_with_sources(Lx, Ly, sources_1D, initial_rho_sources, sigma)
    density_grid_obs = LB_density_with_sources(Lx, Ly, sources_1D, rho_sources_random, sigma)

    #Plots de las densidades.
    #plot_density_grid(density_grid_simulated,Lx,Ly)
    #plot_density_grid(density_grid_obs,Lx,Ly)

    rho_simulated = linearize_grid(density_grid_simulated)
    rho_obs = linearize_grid(density_grid_obs)
    rho_obs = rho_obs[stations]


    tAjuste = [1,2,3,4,5,]
    t=0

    for t in tAjuste:
        # Optimización de los parámetros de las fuentes
        LatticeBoltzmann(tinicial,tfinal=tAujste,datos)
        rho_opt = optimize_parameters_for_cells(stations, rho_obs, sources_1D, initial_rho_sources)
        density_opt= LB_density_with_sources(Lx, Ly, sources_1D, rho_opt, sigma)
        print("Valores óptimos de rho:", rho_opt, rho_sources_random)



#+END_SRC



Idea.

LatticeBoltzmann hasta t, tenemos que pasarle un t inicial, un t final y que lea los datos asociados al t inicial siempre que no sea el t asociado a un ajuste (Ese se corre muchas veces y no necesito que guarde la información, solo que la imprima)

Lattice(0,tAjuste1)
Para en tAjuste1 y los datos antes del ajuste los guarda.
